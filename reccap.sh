    #!/bin/sh
# duration: is the period of time in which traffic is generated
# capture duration: the timespan of the capture
if [ ! -n "$2" ]
then 
    echo 'Input:

    (1) skype | discord | spotify | youtube | music
    (2) Duration >= 15

    (!) Duration is the timespan in which, bluetooth traffic
        is generated by the requested app.
    (!) The capture with last < duration + 10sec > in an attempt to
        start the capture, while still having idle traffic.
        '
    exit 1
fi

app=$1
duration=$2
capture_duration=$((duration + 10))

bt_on=$(bluetoothctl | awk '{print $3; exit}')
if [ $bt_on == "off" ]
then
		echo -e '\e[33m
----------------------------------------
        (!!!) Reminder (!!!)
     Bluetooth should be enabled!
----------------------------------------\e[0m'
		exit 1;
fi
# bd_addr contains the bluetooth address of the paired device
bd_addr=$(bluetoothctl info | awk '{print $2; exit}')
if [ $bd_addr == "device" ]
then 
    echo Bluetooth Unconnected!
    exit 1;
fi

# Not USED actually
./check_device.sh $bd_addr  &> /dev/null & # Keep info for the devices 

device_name=$(bluetoothctl info | awk '{if(NR==2) print $2'})
# sudo -S mkdir video_cap/$device_name

search_device=$(awk "{if(\$1 == \"$device_name\") print \"found\"}" device_log)
# echo $search_device
if [ "$search_device" != "found" ]
then 
    echo "$device_name" "$bd_addr" >> device_log # save the name and BD_ADDR for the new device
    sudo -S mkdir -m777 video_cap/$device_name    # make dedicated directory to save the samples to 
fi

# Count the couples of files wiht the same name
# Divide with 2 (2 files per run of this script)
# Get the suffix value for the newly created .pcap & .mp4
# (1, 2, 3 or ...)

# OLD VERSION
# ls video_cap/$device_name/ | grep  $1 > existing
# count=$(wc -l existing | awk '{print $1}')
# suffix=$(expr $count / 2)
# echo $(expr $count / 2)
# echo suffix: $suffix
# filename=$app'_'$suffix
# rm existing
# echo $filename

#NEW VERSION
ls video_cap/$device_name/ | grep $1 > existing
count=$(wc -l existing | awk '{print $1}')
let count++
filename=$app'_'$count
rm existing
echo $filename
sudo -S mkdir -m777 video_cap/$device_name/$filename


res=$(xdpyinfo | grep 'dimensions:' | awk '{print $2; exit;}')
# Commands for the script to run
SC="ffmpeg -video_size $res -framerate 45 -f x11grab -i :0.0 video_cap/$device_name/$filename/$filename.mp4"
TSHARK="tshark -w video_cap/$device_name/$filename/$filename.pcap -i bluetooth0 -a duration:$capture_duration"
#--- Main ----

# echo 'App:' $app
# echo 'Duration:' $duration

echo -e "\e[32m --- WILLKOMMEN --- \e[0m"

# redirect logging service output to file and check it later 
# to see if anything related to out scirpt has been logged
syslog=$filename'.log'
path="video_cap/$device_name/$filename/$syslog"
# echo $path
sudo -S touch $path
sudo chmod 777 $path
sudo -S journalctl -f &> $path & 
journal_pid=$!
# echo $journal_pid

#start screen recording
#1366x768
#1920x1020
sudo -S $SC &> /dev/null & 
screen_recorder_pid=$!  # keep the pid forz later use
echo -e "\e[32m >Recording...(" $screen_recorder_pid ")\e[0m" 

sudo -S $TSHARK &> /dev/null &
tshark_pid=$!   # save tshark's pid
echo -e "\e[32m >Capturing...(" $tshark_pid ")\e[0m"
sleep 5

# open the requested app
if [ $app == "skype" ]
then 
    # xdotool key "super"
    skypeforlinux &> /dev/null & 
    sleep 10

    #find the skype window 
    target=$(xdotool search --onlyvisible --classname skype)
    sleep 1
    # echo "Requested Window Id: "$target

    sleep 5 # xronos gia na anoiksei?

    #Maximize window size 
    xdotool windowsize --usehints $target 100% 100%
    # echo "The window should be maximized"

    # Preparation to Call the Skype Bot
    xdotool mousemove 100 152 # Move pointer to Skype Search Bar
    xdotool click 1 # Put the cursor in the Search Bar in order to start typing
    sleep 4

    #Typing
    xdotool key "e"
    sleep 1
    xdotool key "c"
    sleep 1
    xdotool key "h"
    sleep 1
    xdotool key "o"
    sleep 1
    xdotool key "Return"
    sleep 2

    xdotool mousemove 100 350 # Move mouse to the search's results the Bot chat
    xdotool click 1 
    sleep 2

    # Move the cursor to the call button 
    # Screen resolution affects the mouse clicks location obv
    if [ $res == "1366x768" ]
    then 
        xdotool mousemove 1285 130 # Move pointer to call button
    elif [ $res == "1920x1080" ]
    then
        xdotool mousemove 1830 130
    else
        echo -e "\e[33m
                Couldn't find the resolution of the monitor...

                This may affect app, such as skype, which heavily
                depend on xdotool
                \e[0m"
    fi
    xdotool click 1 

    app_to_kill="skypeforlinux"
elif [ $app == "discord" ]
then   
    echo -e "\e[32m >Open Discord\e[0m"
    discord &> /dev/null &
    sleep 15 # xronos gia na anoiksei?

    #find the discord window 
    target=$(xdotool search --onlyvisible --classname discord)
    sleep 1
    # echo "Requested Window Id: "$target

    #Maximize window size 
    xdotool windowsize --usehints $target 100% 100%
    # echo "The window should be maximized"
    # To call einai se group chat toy discord

    xdotool mousemove 40 150 
    sleep 1
    xdotool click 1
    sleep 1 
    xdotool mousemove 120 420 
    sleep 1
    xdotool click 1 
    sleep 1 

    sleep 5 # Xronos gia na anoiksei to window

    app_to_kill="Discord"
elif [ $app == "spotify" ]
then
    echo -e "\e[32m >Open Spotify\e[0m"
    spotify &> /dev/null &
    sleep 5 # perimene na anoiksei to window
    # Press Play in Spotify (BELOW)
    dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Play &> /dev/null &
    app_to_kill="spotify"
elif [ $app == "youtube" ]
then 
    echo -e "\e[32m >Open Youtube\e[0m"
    chromium "https://www.youtube.com/watch?v=qshka_Up9TY" &> /dev/null &
    sleep 12 # xronos gia na anoiksei to window 
    app_to_kill="chromium"
elif [ $app == "music" ]
then
    echo -e "\e[32m >Open Media Player\e[0m"
    thunar /home/iraaga/Music/lol/lolen.mp3
    sleep 1 # xronos gia na anoiksei to window
    app_to_kill="vlc" # einai to default media player 
else    
    echo "Lousimo => ELSE"
fi

sleep $duration
if [ $app == "skype" ]
then 
    xdotool mousemove 750 700
    sleep 1 
    xdotool click 1
    sleep 5
fi
killall $app_to_kill

# wait for tshark to finish capturigng before terminating the screen recorder
wait $tshark_pid
echo -e "\e[33m --- TSHARK IS OVER ---\e[0m"

# Kill Screen Recording
sleep 3
echo -e "\e[31m --- Killing Screen Recording process:" $screen_recorder_pid " ---\e[0m"
sudo killall ffmpeg

echo -e "\e[32m --- END --- \e[0m"
